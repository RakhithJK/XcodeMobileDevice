//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <IDEKit/DVTInvalidation-Protocol.h>

@class DVTObservingToken, DVTStackBacktrace, IDEActivityStatusCategory, IDEWorkspaceDocument, NSArray, NSMapTable, NSMutableArray, NSMutableSet, NSString;
@protocol DVTCancellable, DVTInvalidation;

@interface IDEActivityViewDataSource : NSObject <DVTInvalidation>
{
    IDEWorkspaceDocument *_workspaceDocument;
    NSMutableSet *_registeredConsumers;
    BOOL _haveRegisteredFirstConsumer;
    NSString *_debugName;
    DVTObservingToken *_activityReportManagerCompletedReportsObservingToken;
    DVTObservingToken *_activityReportManagerValidObservingToken;
    id <DVTInvalidation> _activityReportManagerObservingToken;
    NSMapTable *_strongReportToStrongMinimumTimeTimerMap;
    NSMutableSet *_activityReportsUnderMinimumDisplayTime;
    NSMutableArray *_backgroundActivitiesLongerThanDelay;
    NSMapTable *_strongDelayedInvocationsByStrongReport;
    NSMapTable *_strongIssueCategoryToIssueCountByURLTable;
    DVTObservingToken *_containerLabelObservingToken;
    DVTObservingToken *_issueManagerObservingToken;
    id <DVTCancellable> _issueObservingToken;
    IDEActivityStatusCategory *_warningsIssueCategory;
    IDEActivityStatusCategory *_analyzerIssueCategory;
    IDEActivityStatusCategory *_errorsIssueCategory;
    IDEActivityStatusCategory *_testFailuresIssueCategory;
    IDEActivityStatusCategory *_runtimeIssueCategory;
    IDEActivityStatusCategory *_toolchainIssueCategory;
    NSArray *_issueCategories;
    double _minimumReportTime;
}

+ (void)initialize;
- (void).cxx_destruct;
- (void)_openIssuesNavigator:(BOOL)arg1;
- (void)_openTestNavigator;
- (void)_updateCategory:(id)arg1 withCurrent:(unsigned long long)arg2 andNew:(unsigned long long)arg3;
- (id)activityReportManager;
- (id)activityReports;
- (id)activityViewLocalURLForIssueManagerURL:(id)arg1;
- (id)dataSourceByCloningReportTimingData;
@property(copy) NSString *debugName; // @synthesize debugName=_debugName;
- (id)effectiveDebugName;
- (void)enumerateConsumersUsingBlock:(CDUnknownBlockType)arg1;
- (BOOL)haveReachedDisplayDelayTimeForActivityReport:(id)arg1;
- (BOOL)haveReachedMinimumDisplayTimeForActivityReport:(id)arg1;
- (id)initWithWorkspaceDocument:(id)arg1;
@property(copy) NSArray *issueCategories; // @synthesize issueCategories=_issueCategories;
- (id)issuesForDocumentURLOrSharedPlaceholderURL:(id)arg1;
- (id)minimumDisplayTimeTimerForActivityReport:(id)arg1;
@property(nonatomic) double minimumReportTime; // @synthesize minimumReportTime=_minimumReportTime;
- (void)minimumTimeForActivityReportDidExpire:(id)arg1;
- (void)minimumTimeTimerForActivityReportDidExpire:(id)arg1;
- (long long)numberOfIssuesForURL:(id)arg1 inCategory:(id)arg2;
- (id)oldestKnownBackgroundActivityReportThatHasMetDisplayDelayTime;
@property(readonly) NSArray *orderedActivityReports;
@property(readonly) NSArray *orderedActivityReportsForListStylePresentation;
- (void)primitiveInvalidate;
- (void)registerConsumer:(id)arg1;
- (void)setHaveReachedMinimumDisplayTime:(BOOL)arg1 forActivityReport:(id)arg2;
- (void)setNumberOfIssues:(long long)arg1 forURL:(id)arg2 inCategory:(id)arg3;
- (id)sharedPlaceholderURLForIssuesWithNoDocument;
- (void)startMinimumDisplayTimeTimerForActivityReport:(id)arg1;
- (void)startObservingActivityReports;
- (void)startObservingIssues;
- (void)startPreDisplayDelayValidatorForReport:(id)arg1;
- (void)startTrackingDisplayDelayTimeIfNeededForReport:(id)arg1;
- (void)startTrackingMinimumDisplayTimeForActivityReport:(id)arg1;
- (void)stopObservingActivityReports;
- (void)stopObservingIssues;
- (void)stopTrackingMinimumDisplayTimeForActivityReport:(id)arg1;
- (void)tearDown;
- (void)unregisterConsumer:(id)arg1;
- (void)updateIssuesForAllURLsWithIssues;
- (void)updateNumberOfIssuesForURL:(id)arg1;
- (id)workspace;
@property(readonly) IDEWorkspaceDocument *workspaceDocument; // @synthesize workspaceDocument=_workspaceDocument;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

